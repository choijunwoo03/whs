package com.example.pentestingplayground.controller;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;



@Controller
public class HomeController {

    @Autowired
    JdbcTemplate jdbcTemplate;

    @GetMapping("/")
    public String index() {
        return "index";
    }

    @GetMapping("/search")
    public String searchPage() {
        return "search";
    }

    @PostMapping("/search")
    public String searchUser(@RequestParam String name, Model model) {
        // SQL Injection 취약한 코드 (PreparedStatement 사용 안 함)
        String sql = "SELECT pw FROM users WHERE name = '" + name + "'";
        try {
            String pw = jdbcTemplate.queryForObject(sql, String.class);
            model.addAttribute("result", name + "의 비밀번호는: " + pw);
        } catch (Exception e) {
            model.addAttribute("result", "사용자 없음");
        }
        return "result";
    }

    @PostMapping("/login")
    public String doLogin(@RequestParam String id, @RequestParam String pw, Model model, HttpSession session) {
        try {
            String sql = "SELECT * FROM users WHERE name = '" + id + "' AND pw = '" + pw + "'";
            List<Map<String, Object>> results = jdbcTemplate.queryForList(sql);

            if (id.equals("admin")) {
                session.setAttribute("loginId", id); //  관리자도 세션 저장
                return "redirect:/";
            }

            if (!results.isEmpty()) {
                session.setAttribute("loginId", id); //  세션 저장
                model.addAttribute("redirect:/", "로그인 성공: " + id);
            }
        } catch (Exception e) {
            model.addAttribute("redirect:/", "DB 오류: " + e.getMessage());
        }

        return "redirect:/";
    }


    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();  // 세션 초기화
        return "redirect:/";
    }

    @GetMapping("/admin/users")
    public String viewAllUsers(HttpSession session, Model model) {
        String loginId = (String) session.getAttribute("loginId");

        // 관리자만 접근 가능
        if (!"admin".equals(loginId)) {
            return "redirect:/"; // 비관리자 접근 차단
        }

        // 모든 사용자 조회
        List<Map<String, Object>> users = jdbcTemplate.queryForList("SELECT * FROM users");
        model.addAttribute("users", users);
        return "admin_users";
    }

    @GetMapping("/register")
    public String registerPage() {
        return "/register";
    }

    @PostMapping("/register")
    public String register(@RequestParam String name, @RequestParam String pw, Model model) {
        try {
            // 1. 아이디 중복 확인
            String checkSql = "SELECT COUNT(*) FROM users WHERE name = ?";
            Integer count = jdbcTemplate.queryForObject(checkSql, Integer.class, name);

            if (count != null && count > 0) {
                model.addAttribute("result", " 이미 존재하는 아이디입니다: " + name);
                return "result";
            }

            // 2. 중복 없으면 회원가입 진행
            String insertSql = "INSERT INTO users (name, pw) VALUES (?, ?)";
            jdbcTemplate.update(insertSql, name, pw);
            model.addAttribute("result", "회원가입 성공: " + name);
        } catch (Exception e) {
            model.addAttribute("result", "회원가입 실패: " + e.getMessage());
        }

        return "result";
    }


}
